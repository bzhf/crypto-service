// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/portfolio.proto

package portfolio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PortfolioService_CreateNewPortfolio_FullMethodName      = "/portfolio.PortfolioService/CreateNewPortfolio"
	PortfolioService_GetPortfolioContentById_FullMethodName = "/portfolio.PortfolioService/GetPortfolioContentById"
	PortfolioService_UpsertAsset_FullMethodName             = "/portfolio.PortfolioService/UpsertAsset"
	PortfolioService_DeleteAsset_FullMethodName             = "/portfolio.PortfolioService/DeleteAsset"
	PortfolioService_GetAllPortfolios_FullMethodName        = "/portfolio.PortfolioService/GetAllPortfolios"
	PortfolioService_GetPortfolioHistory_FullMethodName     = "/portfolio.PortfolioService/GetPortfolioHistory"
	PortfolioService_GetPublicPortfolios_FullMethodName     = "/portfolio.PortfolioService/GetPublicPortfolios"
)

// PortfolioServiceClient is the client API for PortfolioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioServiceClient interface {
	CreateNewPortfolio(ctx context.Context, in *CreateNewPortfolioRequest, opts ...grpc.CallOption) (*CreateNewPortfolioResponse, error)
	GetPortfolioContentById(ctx context.Context, in *GetPortfolioContentByIdRequest, opts ...grpc.CallOption) (*GetPortfolioContentByIdResponse, error)
	UpsertAsset(ctx context.Context, in *UpsertAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllPortfolios(ctx context.Context, in *GetAllPortfoliosRequest, opts ...grpc.CallOption) (*GetAllPortfoliosResponse, error)
	GetPortfolioHistory(ctx context.Context, in *GetPortfolioHistoryRequest, opts ...grpc.CallOption) (*GetPortfolioHistoryResponse, error)
	GetPublicPortfolios(ctx context.Context, in *GetPublicPortfoliosRequest, opts ...grpc.CallOption) (*GetPublicPortfoliosResponse, error)
}

type portfolioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioServiceClient(cc grpc.ClientConnInterface) PortfolioServiceClient {
	return &portfolioServiceClient{cc}
}

func (c *portfolioServiceClient) CreateNewPortfolio(ctx context.Context, in *CreateNewPortfolioRequest, opts ...grpc.CallOption) (*CreateNewPortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewPortfolioResponse)
	err := c.cc.Invoke(ctx, PortfolioService_CreateNewPortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetPortfolioContentById(ctx context.Context, in *GetPortfolioContentByIdRequest, opts ...grpc.CallOption) (*GetPortfolioContentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortfolioContentByIdResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetPortfolioContentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpsertAsset(ctx context.Context, in *UpsertAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortfolioService_UpsertAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortfolioService_DeleteAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetAllPortfolios(ctx context.Context, in *GetAllPortfoliosRequest, opts ...grpc.CallOption) (*GetAllPortfoliosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPortfoliosResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetAllPortfolios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetPortfolioHistory(ctx context.Context, in *GetPortfolioHistoryRequest, opts ...grpc.CallOption) (*GetPortfolioHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortfolioHistoryResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetPortfolioHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetPublicPortfolios(ctx context.Context, in *GetPublicPortfoliosRequest, opts ...grpc.CallOption) (*GetPublicPortfoliosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicPortfoliosResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GetPublicPortfolios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServiceServer is the server API for PortfolioService service.
// All implementations must embed UnimplementedPortfolioServiceServer
// for forward compatibility.
type PortfolioServiceServer interface {
	CreateNewPortfolio(context.Context, *CreateNewPortfolioRequest) (*CreateNewPortfolioResponse, error)
	GetPortfolioContentById(context.Context, *GetPortfolioContentByIdRequest) (*GetPortfolioContentByIdResponse, error)
	UpsertAsset(context.Context, *UpsertAssetRequest) (*emptypb.Empty, error)
	DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error)
	GetAllPortfolios(context.Context, *GetAllPortfoliosRequest) (*GetAllPortfoliosResponse, error)
	GetPortfolioHistory(context.Context, *GetPortfolioHistoryRequest) (*GetPortfolioHistoryResponse, error)
	GetPublicPortfolios(context.Context, *GetPublicPortfoliosRequest) (*GetPublicPortfoliosResponse, error)
	mustEmbedUnimplementedPortfolioServiceServer()
}

// UnimplementedPortfolioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortfolioServiceServer struct{}

func (UnimplementedPortfolioServiceServer) CreateNewPortfolio(context.Context, *CreateNewPortfolioRequest) (*CreateNewPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewPortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) GetPortfolioContentById(context.Context, *GetPortfolioContentByIdRequest) (*GetPortfolioContentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioContentById not implemented")
}
func (UnimplementedPortfolioServiceServer) UpsertAsset(context.Context, *UpsertAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAsset not implemented")
}
func (UnimplementedPortfolioServiceServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedPortfolioServiceServer) GetAllPortfolios(context.Context, *GetAllPortfoliosRequest) (*GetAllPortfoliosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPortfolios not implemented")
}
func (UnimplementedPortfolioServiceServer) GetPortfolioHistory(context.Context, *GetPortfolioHistoryRequest) (*GetPortfolioHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioHistory not implemented")
}
func (UnimplementedPortfolioServiceServer) GetPublicPortfolios(context.Context, *GetPublicPortfoliosRequest) (*GetPublicPortfoliosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicPortfolios not implemented")
}
func (UnimplementedPortfolioServiceServer) mustEmbedUnimplementedPortfolioServiceServer() {}
func (UnimplementedPortfolioServiceServer) testEmbeddedByValue()                          {}

// UnsafePortfolioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServiceServer will
// result in compilation errors.
type UnsafePortfolioServiceServer interface {
	mustEmbedUnimplementedPortfolioServiceServer()
}

func RegisterPortfolioServiceServer(s grpc.ServiceRegistrar, srv PortfolioServiceServer) {
	// If the following call pancis, it indicates UnimplementedPortfolioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortfolioService_ServiceDesc, srv)
}

func _PortfolioService_CreateNewPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).CreateNewPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_CreateNewPortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).CreateNewPortfolio(ctx, req.(*CreateNewPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetPortfolioContentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioContentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetPortfolioContentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetPortfolioContentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetPortfolioContentById(ctx, req.(*GetPortfolioContentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpsertAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpsertAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_UpsertAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpsertAsset(ctx, req.(*UpsertAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetAllPortfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPortfoliosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetAllPortfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetAllPortfolios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetAllPortfolios(ctx, req.(*GetAllPortfoliosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetPortfolioHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetPortfolioHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetPortfolioHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetPortfolioHistory(ctx, req.(*GetPortfolioHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetPublicPortfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicPortfoliosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetPublicPortfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetPublicPortfolios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetPublicPortfolios(ctx, req.(*GetPublicPortfoliosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioService_ServiceDesc is the grpc.ServiceDesc for PortfolioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfolio.PortfolioService",
	HandlerType: (*PortfolioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewPortfolio",
			Handler:    _PortfolioService_CreateNewPortfolio_Handler,
		},
		{
			MethodName: "GetPortfolioContentById",
			Handler:    _PortfolioService_GetPortfolioContentById_Handler,
		},
		{
			MethodName: "UpsertAsset",
			Handler:    _PortfolioService_UpsertAsset_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _PortfolioService_DeleteAsset_Handler,
		},
		{
			MethodName: "GetAllPortfolios",
			Handler:    _PortfolioService_GetAllPortfolios_Handler,
		},
		{
			MethodName: "GetPortfolioHistory",
			Handler:    _PortfolioService_GetPortfolioHistory_Handler,
		},
		{
			MethodName: "GetPublicPortfolios",
			Handler:    _PortfolioService_GetPublicPortfolios_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/portfolio.proto",
}
